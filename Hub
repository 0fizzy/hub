local Webhook = "https://discord.com/api/webhooks/1312478633805348975/Aoye2DVebeJVYRZgCe1h2I3Ji0fxaxI3-OS4Xtn4ikEyzD71OmOJ9eInwloLj9aTRyCv" 
_G.Discord_UserID = ""

local player = game:GetService("Players").LocalPlayer
local joinTime = os.time() - (player.AccountAge*86400)
local joinDate = os.date("!*t", joinTime)
local executor = identifyexecutor() or "Shit ass executor (not able to detect)"
local icon = game:HttpGet(string.format("https://thumbnails.roblox.com/v1/users/avatar?userIds=%d&size=180x180&format=Png&isCircular=true", game.Players.LocalPlayer.UserId))
icon = game:GetService("HttpService"):JSONDecode(icon).data[1]
local AvatarImage = icon.imageUrl

local AllowedHWIDs = {
	"40EC9CDA-1B51-4A38-B2BD-9B50E7C1E1E3", -- Xero
	--"D9FAB63E-42BA-4C1A-8637-0D79BCD5B820", -- Fly
	"hwid3"
}

local function getHWID()
	return game:GetService("RbxAnalyticsService"):GetClientId()
end

local userHWID = getHWID()
_G.HWID = false

for _, hwid in ipairs(AllowedHWIDs) do
	if userHWID == hwid then
		_G.HWID = true
		break
	end
end

local msg = {
	["content"] = ( _G.Discord_UserID ~= "" and  _G.Discord_UserID ~= nil) and tostring("<@".._G.Discord_UserID..">") or " ",
	["embeds"] = {
		{
			["color"] = tonumber(tostring("0x32CD32")),
			["title"] = _G.HWID and "Someone executed the hub." or "Unauthorized execution attempt.",
			["thumbnail"] = {
				["url"] = AvatarImage,
			},
			["fields"] = {
				{
					["name"] = "Username",
					["value"] = player.Name,
					["inline"] = true
				},
				{
					["name"] = "Display Name",
					["value"] = player.DisplayName,
					["inline"] = true
				},
				{
					["name"] = "UID",
					["value"] = "["..player.UserId.."](" .. tostring("https://www.roblox.com/users/" .. game.Players.LocalPlayer.UserId .. "/profile")..")",
					["inline"] = true
				},
				{
					["name"] = "Game Id",
					["value"] = "["..game.PlaceId.."](" .. tostring("https://www.roblox.com/games/" .. game.PlaceId) ..")",
					["inline"] = true
				},
				{
					["name"] = "Game Name",
					["value"] = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
					["inline"] = true
				},
				{
					["name"] = "Executor Used",
					["value"] = executor,
					["inline"] = true
				},
				{
					["name"] = "Account Age",
					["value"] = player.AccountAge.."day(s)",
					["inline"] = true
				},
				{
					["name"] = "Date Joined",
					["value"] = joinDate.day.."/"..joinDate.month.."/"..joinDate.year,
					["inline"] = true
				},
				{
					["name"] = "HWID",
					["value"] = userHWID,
					["inline"] = true
				},
				{
					["name"] = "Allowed",
					["value"] = tostring(_G.HWID),
					["inline"] = true
				},
			},
			['timestamp'] = os.date("%Y-%m-%dT%X.000Z")
		}
	}
}
local request = (syn and syn.request) or (http and http.request) or http_request
if request then
	request({Url = Webhook, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = game:GetService("HttpService"):JSONEncode(msg)})
end

if _G.HWID then
	local PlaceId = game.PlaceId

	local games = {
		[12177325772] = "https://raw.githubusercontent.com/0fizzy/hub/main/SLS",
		[14382948560] = "https://raw.githubusercontent.com/0fizzy/hub/main/SLS",
		[110948941832728] = "https://raw.githubusercontent.com/0fizzy/hub/main/SLS",
		[126195208568849] = "https://raw.githubusercontent.com/0fizzy/hub/main/SLS",
		[9586878618] = "https://raw.githubusercontent.com/0fizzy/hub/main/InazumaRebirth"
	}

	if games[PlaceId] then
		return loadstring(game:HttpGet(games[PlaceId]))()
	end

	player:Kick("Game is not supported, join .gg/jVrEHgMJMn to suggest, copied to your clipboard.")
else
	player:Kick(game:GetService("RbxAnalyticsService"):GetClientId() .. " Not whitelisted.")
end
